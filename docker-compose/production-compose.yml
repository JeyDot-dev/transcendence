name:     transcendence

services:
  
  # elastic-search:
  #   container_name:   "elasticsearch"
  #   image:            elasticsearch:8.14.1
  #   environment:
  #     - discovery.type=single-node
  #   volumes:
  #     - elastic_data:/usr/share/elasticsearch/data
  #   ports:
  #     - 9200:9200
  #   networks:
  #     - elastic_network
  #   restart:        always
  es_setup:
    container_name: es_setup
    image: elasticsearch:8.14.3
    volumes:
      - certs_data:/usr/share/elasticsearch/config/certs
    networks:
      - elk
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  logstash:
    container_name: logstash
    image: logstash:8.14.3
    restart: always
    user: root
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    volumes:
      - certs_data:/usr/share/logstash/certs
      - logstash_data:/usr/share/logstash/data
      # - "./logstash_ingest_data/:/usr/share/logstash/ingest_data/"
      - "../containers/logstash/:/usr/share/logstash/pipeline:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
    ports:
      - 12201:12201/udp
    networks:
      - elk
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent http://localhost:9600/_node/pipelines | grep -q '\"id\"'"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    container_name: nginx
    restart:        always

    build:
      dockerfile:     ../containers/nginx/Dockerfile
      context:        ../containers 
    healthcheck:
      test:         ["CMD", "curl", "-f", "http://localhost"]
      interval:     1m30s
      timeout:      10s
      retries:      3
    depends_on:
      logstash:
        condition: service_healthy
      gunicorn:
        condition: service_started
      daphne:
        condition: service_started
      kibana:
        condition: service_healthy

    ports:
      - 80:80
      - 443:443
      - 447:447
    volumes:
      - ../project/static_production:/static
    networks:
        - backend
        - frontend
        - elk
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
    
  redis:
    container_name: redis
    image:          redis:7.2.5
    restart:        always
    depends_on:
      logstash:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1m30s
      timeout: 10s
      retries: 3
    networks:
        - elk
        - backend
    command: ["redis-server", "--loglevel", "debug"]
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201

  db:
    container_name: postgres
    image:          postgres:16.3-bookworm
    restart:        always
    depends_on:
      logstash:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U${DB_USER} -d${DB_NAME}"]
      start_period: 5s
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
        - postgres_data:/var/lib/postgresql/data

    environment: #To change to secrets
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER} 
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
        - elk
        - backend
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201

  daphne:
    container_name: daphne
    build:
      dockerfile:     ../containers/daphne/Dockerfile
      context:        ../containers 
    restart:        always
    depends_on:
      logstash:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition:  service_started
    volumes:
      - ../project:/project
    networks:
        - elk
        - backend
        - frontend
    environment:
      DB_NAME:      ${DB_NAME}
      DB_USER:      ${DB_USER}
      DB_PASSWORD:  ${DB_PASSWORD}
      DB_HOST:      db
      DB_PORT:      ${DB_PORT}
      SUPER_USER:   ${SUPER_USER}
      SUPER_PASSWORD:   ${SUPER_PASSWORD}
      SUPER_MAIL:   ${SUPER_MAIL}
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201

  gunicorn:
    container_name: gunicorn
    build:          ../containers/gunicorn
    restart:        always
    depends_on:
      logstash:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - ../project:/project
    networks:
        - elk
        - backend
        - frontend
    environment:
      DB_NAME:      ${DB_NAME}
      DB_USER:      ${DB_USER}
      DB_PASSWORD:  ${DB_PASSWORD}
      DB_HOST:      db
      DB_PORT:      ${DB_PORT}
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201

  es01:
    container_name: es01
    restart:        always
    depends_on:
      es_setup:
        condition: service_healthy
    image: elasticsearch:8.14.3
    # labels:
    #   co.elastic.logs/module: elasticsearch
    volumes:
      - certs_data:/usr/share/elasticsearch/config/certs
      - es_data:/usr/share/elasticsearch/data
    networks:
      - elk
    ports:
      - 9200:9200
    environment:
      - node.name=es01
      - cluster.name=transcendence-cluster
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      # - xpack.license.self_generated.type=basic
    mem_limit: 2g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    container_name: kibana
    restart:        always
    depends_on:
      es01:
        condition: service_healthy
    image: kibana:8.14.3
    # labels:
    #   co.elastic.logs/module: kibana
    volumes:
      - certs_data:/usr/share/kibana/config/certs
      - kibana_data:/usr/share/kibana/data
    networks:
      - elk
    ports:
      - 5601:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      #TODO: Script to create encryption key for production using "/bin/kibana-encryption-keys generate" and setting it in the environment
    mem_limit: 1g
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120


volumes:
  postgres_data:
  certs_data:
  es_data:
  kibana_data:
  logstash_data:



networks:
  backend:
  frontend:
  elk:
